name: Production Deploy and Migration

on:
  push:
    branches: [prod]
  workflow_dispatch:
    inputs:
      target_project_ref:
        description: "Target Supabase project reference ID for production"
        required: true
      target_project_url:
        description: "Target Supabase project URL (https://xxxxx.supabase.co)"
        required: true
      force_migration:
        description: "Force migration even if no changes detected"
        type: boolean
        default: false

jobs:
  deploy-to-production:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Supabase CLI
        run: npm install supabase --save-dev
      
      - name: Verify Supabase CLI
        run: npx supabase --version
      
      # Export from source (current) project
      - name: Export from source project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "🔗 Linking to source project..."
          npx supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          
          echo "📤 Exporting database schema..."
          npx supabase db dump --schema-only --file source_schema.sql --debug
          
          echo "📤 Exporting database data..."
          npx supabase db dump --data-only --file source_data.sql --debug
          
          echo "📦 Backing up Edge Functions..."
          mkdir -p exported_functions
          if [ -d "supabase/functions" ] && [ "$(ls -A supabase/functions)" ]; then
            cp -r supabase/functions/* exported_functions/
          fi
      
      # Get target project ref from input or secrets
      - name: Set target project variables
        id: target
        run: |
          if [ "${{ github.event.inputs.target_project_ref }}" != "" ]; then
            echo "project_ref=${{ github.event.inputs.target_project_ref }}" >> $GITHUB_OUTPUT
            echo "project_url=${{ github.event.inputs.target_project_url }}" >> $GITHUB_OUTPUT
          else
            echo "project_ref=${{ secrets.PROD_SUPABASE_PROJECT_REF }}" >> $GITHUB_OUTPUT
            echo "project_url=${{ secrets.PROD_SUPABASE_URL }}" >> $GITHUB_OUTPUT
          fi
      
      # Deploy to target (production) project
      - name: Deploy to target project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "🎯 Linking to target project: ${{ steps.target.outputs.project_ref }}"
          npx supabase link --project-ref ${{ steps.target.outputs.project_ref }}
          
          echo "📥 Applying schema to target project..."
          if [ -f "source_schema.sql" ] && [ -s "source_schema.sql" ]; then
            npx supabase db push --file source_schema.sql --debug
          else
            echo "⚠️  No schema changes to apply"
          fi
          
          echo "📥 Applying data to target project..."
          if [ -f "source_data.sql" ] && [ -s "source_data.sql" ]; then
            npx supabase db push --file source_data.sql --debug
          else
            echo "⚠️  No data changes to apply"
          fi
          
          echo "🚀 Deploying Edge Functions to target project..."
          if [ -d "exported_functions" ] && [ "$(ls -A exported_functions)" ]; then
            for func in exported_functions/*; do
              if [ -d "$func" ]; then
                func_name=$(basename "$func")
                echo "📦 Deploying function: $func_name"
                npx supabase functions deploy $func_name --source-dir "$func" --debug
              fi
            done
          else
            echo "⚠️  No Edge Functions to deploy"
          fi
      
      # Verification
      - name: Verify deployment
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "🔍 Verifying deployment to target project..."
          npx supabase migration list --debug
          
          echo "✅ Production deployment completed successfully!"
          echo "🎯 Target project: ${{ steps.target.outputs.project_ref }}"
          echo "🔗 URL: ${{ steps.target.outputs.project_url }}"
      
      # Cleanup
      - name: Cleanup temporary files
        run: |
          rm -f source_schema.sql source_data.sql
          rm -rf exported_functions
          echo "🧹 Cleanup completed"
      
      # Notify success
      - name: Deployment summary
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Project**: ${{ secrets.SUPABASE_PROJECT_REF }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Project**: ${{ steps.target.outputs.project_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target URL**: ${{ steps.target.outputs.project_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: prod" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY